env:
  DIRECTORY: .output
  PROJECT_NAME: Xianxu

name: Deploy

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  Version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      version_changed: ${{ steps.check_version.outputs.version_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check for version change
        id: check_version
        run: |
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
            if git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -q '^package\.json$'; then
              # Check if version actually changed in package.json
              BASE_VERSION=$(git show ${{ github.event.pull_request.base.sha }}:package.json | jq -r .version || echo "none")
              HEAD_VERSION=$(git show ${{ github.event.pull_request.head.sha }}:package.json | jq -r .version || echo "none")
              if [ "$BASE_VERSION" != "$HEAD_VERSION" ]; then
                VERSION_CHANGED=1
              else
                VERSION_CHANGED=0
              fi
            else
              VERSION_CHANGED=0
            fi
          else
            # For direct pushes to master
            BEFORE_VERSION=$(git show HEAD~1:package.json | jq -r .version 2>/dev/null || echo "none")
            AFTER_VERSION=$(jq -r .version package.json)
            if [ "$BEFORE_VERSION" != "$AFTER_VERSION" ]; then
              VERSION_CHANGED=1
            else
              VERSION_CHANGED=0
            fi
          fi
          echo "version_changed=$VERSION_CHANGED" >> "$GITHUB_OUTPUT"
      - name: Get version
        if: ${{ steps.check_version.outputs.version_changed == '1' }}
        id: get_version
        run: |
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
            VERSION=$(git show ${{ github.event.pull_request.head.sha }}:package.json | jq -r .version)
          else
            VERSION=$(jq -r .version package.json)
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

  Submit:
    needs: Version
    if: ${{ needs.Version.outputs.version_changed == '1' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Build extensions with Turbo
        run: npm run build:ext
      - name: Zip extensions
        run: |
          cd apps/extension && npm run zip && npm run zip:fox
      - name: Submit to stores
        working-directory: apps/extension
        run: |
          npx wxt submit \
            # --chrome-zip ${{ env.DIRECTORY }}/xianxu-${{ needs.Version.outputs.version }}-chrome.zip \
            --firefox-zip ${{ env.DIRECTORY }}/xianxu-${{ needs.Version.outputs.version }}-firefox.zip \
            --firefox-sources-zip ${{ env.DIRECTORY }}/xianxu-${{ needs.Version.outputs.version }}-sources.zip
        env:
          #   CHROME_EXTENSION_ID: ${{ secrets.EXTENSION_ID }}
          #   CHROME_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          #   CHROME_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          #   CHROME_REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
          FIREFOX_EXTENSION_ID: ${{ secrets.FIREFOX_EXTENSION_ID }}
          FIREFOX_JWT_ISSUER: ${{ secrets.FIREFOX_JWT_ISSUER }}
          FIREFOX_JWT_SECRET: ${{ secrets.FIREFOX_JWT_SECRET }}
      - name: Create Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          tag_name: "v${{ needs.Version.outputs.version }}"
          name: "v${{ needs.Version.outputs.version }}"
          draft: false
          prerelease: true
          files: |
            # ${{ env.DIRECTORY }}/xianxu-${{ needs.Version.outputs.version }}-chrome.zip
            ${{ env.DIRECTORY }}/xianxu-${{ needs.Version.outputs.version }}-firefox.zip
            ${{ env.DIRECTORY }}/xianxu-${{ needs.Version.outputs.version }}-sources.zip
