// This file is generated by AI and should not be used as ref to type safety

import createClient from '@repo/auth/client'
import type { Bookmark, Novel, NovelChapter, ReadNovel, ReadStreak } from '../../generated/prisma'

const supabase = createClient({})

// Helper type to transform Prisma types for use with Supabase
type SupabaseReturn<T> = {
    data: T | null
    error: Error | null
}

// Utility type for Supabase query functions
type SupabaseQuery<T> = Promise<SupabaseReturn<T>>

// Helper function to type Supabase queries
function query<T>() {
    return null as unknown as SupabaseQuery<T>
}


/**
 * a
 */


// Example functions using Prisma types with Supabase

/**
 * Get a novel by ID
 */
export async function getNovel(novelId: string): SupabaseQuery<Novel> {
    return await supabase
        .from('Novel')
        .select('*')
        .eq('id', novelId)
        .single()
}

/**
 * Get all chapters for a novel
 */
export async function getNovelChapters(novelId: string): SupabaseQuery<NovelChapter[]> {
    return await supabase
        .from('NovelChapter')
        .select('*')
        .eq('novelId', novelId)
        .order('number', { ascending: true })
}

/**
 * Create a new bookmark
 */
export async function createBookmark(bookmark: Omit<Bookmark, 'id' | 'createdAt' | 'updatedAt'>): SupabaseQuery<Bookmark> {
    return await supabase
        .from('Bookmark')
        .insert(bookmark)
        .select()
        .single()
}

/**
 * Update user's reading progress
 */
export async function updateReadingProgress(
    userId: string,
    novelId: string,
    currentChapterId: string
): SupabaseQuery<ReadNovel> {
    return await supabase
        .from('ReadNovel')
        .upsert({
            userId,
            novelId,
            currentChapterId,
            lastReadAt: new Date().toISOString()
        })
        .select()
        .single()
}

/**
 * Record reading streak
 */
export async function recordReadingStreak(
    streak: Omit<ReadStreak, 'id' | 'createdAt' | 'updatedAt'>
): SupabaseQuery<ReadStreak> {
    return await supabase
        .from('ReadStreak')
        .insert(streak)
        .select()
        .single()
}

/**
 * Search novels by title or author
 */
export async function searchNovels(searchTerm: string): SupabaseQuery<Novel[]> {
    return await supabase
        .from('Novel')
        .select('*')
        .or(`title.ilike.%${searchTerm}%,author.ilike.%${searchTerm}%`)
        .limit(20)
}
