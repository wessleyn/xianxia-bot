// This file is generated by AI and should not be used as ref to type safety

import createClient from '@repo/auth/client'
import type { Bookmark, Novel, NovelChapter, ReadNovel, ReadStreak } from '../../generated/prisma'

const supabase = createClient({})

// Helper type to transform Prisma types for use with Supabase
export type SupabaseReturn<T> = {
    data: T | null
    error: Error | null
}

// Utility type for Supabase query functions
export type SupabaseQuery<T> = Promise<SupabaseReturn<T>>

// Helper function to type Supabase queries
export function query<T>() {
    return null as unknown as SupabaseQuery<T>
}


/**
 * a
 */


// Example functions using Prisma types with Supabase

/**
 * Fetch One
 */
 async function getNovel(novelId: string): SupabaseQuery<Novel> {
    return await supabase
        .from('Novel')
        .select('*')
        .eq('id', novelId)
        .single()
}

/**
 * Fetch All
 */
 async function getNovelChapters(novelId: string): SupabaseQuery<NovelChapter[]> {
    return await supabase
        .from('NovelChapter')
        .select('*')
        .eq('novelId', novelId)
        .order('number', { ascending: true })
}

/**
 * Create One
 */
 async function createBookmark(bookmark: Omit<Bookmark, 'id' | 'createdAt' | 'updatedAt'>): SupabaseQuery<Bookmark> {
    return await supabase
        .from('Bookmark')
        .insert(bookmark)
        .select()
        .single()
}

/**
 * Search 
 */
 async function searchNovels(searchTerm: string): SupabaseQuery<Novel[]> {
    return await supabase
        .from('Novel')
        .select('*')
        .or(`title.ilike.%${searchTerm}%,author.ilike.%${searchTerm}%`)
        .limit(20)
}
